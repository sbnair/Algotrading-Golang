// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/ceprule.proto

package ceprulepb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CalculateStrategyFundAllocationReq struct {
	BaseOrderSize             float64  `protobuf:"fixed64,1,opt,name=base_order_size,json=baseOrderSize,proto3" json:"base_order_size,omitempty"`
	SafetyOrderSize           float64  `protobuf:"fixed64,2,opt,name=safety_order_size,json=safetyOrderSize,proto3" json:"safety_order_size,omitempty"`
	SafetyOrderVolumeScale    float64  `protobuf:"fixed64,3,opt,name=safety_order_volume_scale,json=safetyOrderVolumeScale,proto3" json:"safety_order_volume_scale,omitempty"`
	SafetyOrderStepScale      float64  `protobuf:"fixed64,4,opt,name=safety_order_step_scale,json=safetyOrderStepScale,proto3" json:"safety_order_step_scale,omitempty"`
	TotalNoDeals              int64    `protobuf:"varint,5,opt,name=total_no_deals,json=totalNoDeals,proto3" json:"total_no_deals,omitempty"`
	MaxActiveSafetyTradeCount float64  `protobuf:"fixed64,6,opt,name=max_active_safety_trade_count,json=maxActiveSafetyTradeCount,proto3" json:"max_active_safety_trade_count,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *CalculateStrategyFundAllocationReq) Reset()         { *m = CalculateStrategyFundAllocationReq{} }
func (m *CalculateStrategyFundAllocationReq) String() string { return proto.CompactTextString(m) }
func (*CalculateStrategyFundAllocationReq) ProtoMessage()    {}
func (*CalculateStrategyFundAllocationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec49bb0fa233fd2, []int{0}
}

func (m *CalculateStrategyFundAllocationReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculateStrategyFundAllocationReq.Unmarshal(m, b)
}
func (m *CalculateStrategyFundAllocationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculateStrategyFundAllocationReq.Marshal(b, m, deterministic)
}
func (m *CalculateStrategyFundAllocationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateStrategyFundAllocationReq.Merge(m, src)
}
func (m *CalculateStrategyFundAllocationReq) XXX_Size() int {
	return xxx_messageInfo_CalculateStrategyFundAllocationReq.Size(m)
}
func (m *CalculateStrategyFundAllocationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateStrategyFundAllocationReq.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateStrategyFundAllocationReq proto.InternalMessageInfo

func (m *CalculateStrategyFundAllocationReq) GetBaseOrderSize() float64 {
	if m != nil {
		return m.BaseOrderSize
	}
	return 0
}

func (m *CalculateStrategyFundAllocationReq) GetSafetyOrderSize() float64 {
	if m != nil {
		return m.SafetyOrderSize
	}
	return 0
}

func (m *CalculateStrategyFundAllocationReq) GetSafetyOrderVolumeScale() float64 {
	if m != nil {
		return m.SafetyOrderVolumeScale
	}
	return 0
}

func (m *CalculateStrategyFundAllocationReq) GetSafetyOrderStepScale() float64 {
	if m != nil {
		return m.SafetyOrderStepScale
	}
	return 0
}

func (m *CalculateStrategyFundAllocationReq) GetTotalNoDeals() int64 {
	if m != nil {
		return m.TotalNoDeals
	}
	return 0
}

func (m *CalculateStrategyFundAllocationReq) GetMaxActiveSafetyTradeCount() float64 {
	if m != nil {
		return m.MaxActiveSafetyTradeCount
	}
	return 0
}

type CalculateStrategyFundAllocationRes struct {
	TotalFundForAllocation float64  `protobuf:"fixed64,1,opt,name=total_fund_for_allocation,json=totalFundForAllocation,proto3" json:"total_fund_for_allocation,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *CalculateStrategyFundAllocationRes) Reset()         { *m = CalculateStrategyFundAllocationRes{} }
func (m *CalculateStrategyFundAllocationRes) String() string { return proto.CompactTextString(m) }
func (*CalculateStrategyFundAllocationRes) ProtoMessage()    {}
func (*CalculateStrategyFundAllocationRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ec49bb0fa233fd2, []int{1}
}

func (m *CalculateStrategyFundAllocationRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculateStrategyFundAllocationRes.Unmarshal(m, b)
}
func (m *CalculateStrategyFundAllocationRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculateStrategyFundAllocationRes.Marshal(b, m, deterministic)
}
func (m *CalculateStrategyFundAllocationRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateStrategyFundAllocationRes.Merge(m, src)
}
func (m *CalculateStrategyFundAllocationRes) XXX_Size() int {
	return xxx_messageInfo_CalculateStrategyFundAllocationRes.Size(m)
}
func (m *CalculateStrategyFundAllocationRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateStrategyFundAllocationRes.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateStrategyFundAllocationRes proto.InternalMessageInfo

func (m *CalculateStrategyFundAllocationRes) GetTotalFundForAllocation() float64 {
	if m != nil {
		return m.TotalFundForAllocation
	}
	return 0
}

func init() {
	proto.RegisterType((*CalculateStrategyFundAllocationReq)(nil), "ceprule.CalculateStrategyFundAllocationReq")
	proto.RegisterType((*CalculateStrategyFundAllocationRes)(nil), "ceprule.CalculateStrategyFundAllocationRes")
}

func init() {
	proto.RegisterFile("proto/ceprule.proto", fileDescriptor_7ec49bb0fa233fd2)
}

var fileDescriptor_7ec49bb0fa233fd2 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x5f, 0x4b, 0x32, 0x41,
	0x14, 0xc6, 0x59, 0x7d, 0x5f, 0xa3, 0xa9, 0x94, 0xa6, 0xb0, 0x35, 0x88, 0x44, 0x22, 0xa4, 0xc0,
	0xa0, 0xe8, 0xa2, 0xbb, 0xcc, 0xf0, 0xb2, 0x60, 0x37, 0xba, 0xe8, 0x66, 0x38, 0xce, 0x1e, 0x63,
	0x61, 0xdc, 0xd9, 0xe6, 0x8f, 0xa8, 0x7d, 0x86, 0xbe, 0x5c, 0x9f, 0x28, 0x66, 0xdc, 0x52, 0xaf,
	0xac, 0xcb, 0xf3, 0x3c, 0xbf, 0x87, 0x67, 0xf7, 0xcc, 0x21, 0x7b, 0xb9, 0x92, 0x46, 0x5e, 0x70,
	0xcc, 0x95, 0x15, 0xd8, 0xf1, 0x13, 0xdd, 0x28, 0xc6, 0xd6, 0x67, 0x89, 0xb4, 0x7a, 0x20, 0xb8,
	0x15, 0x60, 0x30, 0x36, 0x0a, 0x0c, 0xbe, 0x4e, 0xfb, 0x36, 0x4b, 0xba, 0x42, 0x48, 0x0e, 0x26,
	0x95, 0x59, 0x84, 0x6f, 0xf4, 0x94, 0xd4, 0x06, 0xa0, 0x91, 0x49, 0x95, 0xa0, 0x62, 0x3a, 0x9d,
	0x61, 0x18, 0x34, 0x83, 0x76, 0x10, 0xed, 0x38, 0xf9, 0xd1, 0xa9, 0x71, 0x3a, 0x43, 0x7a, 0x46,
	0x76, 0x35, 0x0c, 0xd1, 0x4c, 0x97, 0xc9, 0x92, 0x27, 0x6b, 0x73, 0x63, 0xc1, 0xde, 0x90, 0xc6,
	0x0a, 0x3b, 0x96, 0xc2, 0x8e, 0x90, 0x69, 0x0e, 0x02, 0xc3, 0xb2, 0xcf, 0xd4, 0x97, 0x32, 0xcf,
	0xde, 0x8e, 0x9d, 0x4b, 0xaf, 0xc9, 0xc1, 0x6a, 0x8d, 0xc1, 0xbc, 0x08, 0xfe, 0xf3, 0xc1, 0xfd,
	0xe5, 0x32, 0x83, 0xf9, 0x3c, 0x76, 0x42, 0xaa, 0x46, 0x1a, 0x10, 0x2c, 0x93, 0x2c, 0x41, 0x10,
	0x3a, 0xfc, 0xdf, 0x0c, 0xda, 0xe5, 0x68, 0xdb, 0xab, 0x0f, 0xf2, 0xde, 0x69, 0xf4, 0x96, 0x1c,
	0x8d, 0x60, 0xc2, 0x80, 0x9b, 0x74, 0x8c, 0xac, 0xe8, 0x31, 0x0a, 0x12, 0x64, 0x5c, 0xda, 0xcc,
	0x84, 0x15, 0x5f, 0xd1, 0x18, 0xc1, 0xa4, 0xeb, 0x99, 0xd8, 0x23, 0x4f, 0x8e, 0xe8, 0x39, 0xa0,
	0xc5, 0x7e, 0xb1, 0x53, 0xed, 0xfe, 0x7f, 0xfe, 0x35, 0x43, 0x9b, 0x25, 0x6c, 0x28, 0x15, 0x83,
	0x1f, 0xbf, 0xd8, 0x6e, 0xdd, 0x03, 0x2e, 0xda, 0x97, 0x6a, 0x91, 0xbe, 0xfc, 0x08, 0x48, 0xb5,
	0x87, 0x79, 0x64, 0x05, 0xc6, 0xa8, 0xc6, 0x29, 0x47, 0xfa, 0x4e, 0x8e, 0xd7, 0x74, 0xd2, 0xf3,
	0xce, 0xf7, 0x11, 0xac, 0x7f, 0xf1, 0xc3, 0x3f, 0xc0, 0xfa, 0x6e, 0xeb, 0x65, 0xb3, 0xa0, 0xf3,
	0xc1, 0xa0, 0xe2, 0x4f, 0xec, 0xea, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x97, 0x12, 0x05, 0x79,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CepRuleServiceClient is the client API for CepRuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CepRuleServiceClient interface {
	CalculateStrategyFundAllocation(ctx context.Context, in *CalculateStrategyFundAllocationReq, opts ...grpc.CallOption) (*CalculateStrategyFundAllocationRes, error)
}

type cepRuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCepRuleServiceClient(cc grpc.ClientConnInterface) CepRuleServiceClient {
	return &cepRuleServiceClient{cc}
}

func (c *cepRuleServiceClient) CalculateStrategyFundAllocation(ctx context.Context, in *CalculateStrategyFundAllocationReq, opts ...grpc.CallOption) (*CalculateStrategyFundAllocationRes, error) {
	out := new(CalculateStrategyFundAllocationRes)
	err := c.cc.Invoke(ctx, "/ceprule.CepRuleService/CalculateStrategyFundAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CepRuleServiceServer is the server API for CepRuleService service.
type CepRuleServiceServer interface {
	CalculateStrategyFundAllocation(context.Context, *CalculateStrategyFundAllocationReq) (*CalculateStrategyFundAllocationRes, error)
}

// UnimplementedCepRuleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCepRuleServiceServer struct {
}

func (*UnimplementedCepRuleServiceServer) CalculateStrategyFundAllocation(ctx context.Context, req *CalculateStrategyFundAllocationReq) (*CalculateStrategyFundAllocationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateStrategyFundAllocation not implemented")
}

func RegisterCepRuleServiceServer(s *grpc.Server, srv CepRuleServiceServer) {
	s.RegisterService(&_CepRuleService_serviceDesc, srv)
}

func _CepRuleService_CalculateStrategyFundAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateStrategyFundAllocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CepRuleServiceServer).CalculateStrategyFundAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ceprule.CepRuleService/CalculateStrategyFundAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CepRuleServiceServer).CalculateStrategyFundAllocation(ctx, req.(*CalculateStrategyFundAllocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CepRuleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ceprule.CepRuleService",
	HandlerType: (*CepRuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateStrategyFundAllocation",
			Handler:    _CepRuleService_CalculateStrategyFundAllocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ceprule.proto",
}
