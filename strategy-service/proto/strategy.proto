syntax = "proto3";
package strategy;
option go_package = "strategypb";

service StrategyService {
    rpc CreateStrategy(CreateStrategyReq) returns (CreateStrategyRes);
    rpc ReadStrategy(ReadStrategyReq) returns (ReadStrategyRes);
    rpc UpdateStrategy(UpdateStrategyReq) returns (UpdateStrategyRes);
    rpc DeleteStrategy(DeleteStrategyReq) returns (DeleteStrategyRes);
    rpc ListStrategies(ListStrategyReq) returns (stream ListStrategyRes);
}

message Strategy {
    string id = 1;
    string bot_name = 2;
    string selected_strategy = 3;
    string bot_type = 4;
    string pairs = 5;
    string strategy_type = 6;
    string profit_currency = 7;
    double base_order_size = 8;
    double safety_order_size = 9;
    string order_type = 10;
    string target_profit = 11;
    string profit_type = 12;
    string trailing_deviation = 13;
    string stop_loss = 14;
    string stop_loss_action = 15;
    string max_safety_trade_acc = 16;
    string max_active_safety_trade_acc = 17;
    string price_devation = 18;
    string safety_order_volume_scale = 19;
    string safety_order_step_scale = 20;
    bool active = 21;
    string no_deal_if_daily_volume_is_less_than = 22;
    double min_price_to_open_deal = 23;
    double max_price_to_open_deal = 24;
    string cooldown_bewtween_deals = 25;
    string open_deal_stop = 26;
}

message CreateStrategyReq {
    Strategy strategy = 1;
}

message CreateStrategyRes {
    Strategy strategy = 1;
}

message UpdateStrategyReq {
    Strategy Strategy = 1;
}

message UpdateStrategyRes {
    Strategy Strategy = 1;
}

message ReadStrategyReq {
    string id = 1;
}

message ReadStrategyRes {
    Strategy Strategy = 1;
}

message DeleteStrategyReq {
    string id = 1;
}

message DeleteStrategyRes {
    bool success = 1;
}

message ListStrategyReq{}

message ListStrategyRes{
    Strategy Strategy = 1;
}